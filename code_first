#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_LINE 512               // Maximum length for a line in the CSV file
#define SYMPTOM_COUNT 7            // Total number of symptoms per patient

// ------------------ Data Structure Definition ------------------
typedef struct Patient {
    char ssn[20];                 // Social Security Number (or unique ID)
    int age;                      // Calculated from DoB (Year)
    char dateIn[11];              // Date of admission (dd/mm/yyyy)
    char timeIn[6];               // Time of admission (hh:mm)
    int priority;                 // Calculated priority (1: High, 2: Medium, 3: Low)
    struct Patient* next;        // Pointer to the next patient in the queue
} Patient;

// ------------------ Global Variables ------------------
Patient* head = NULL;             // Head of the priority-based linked list

// ------------------ Function Declarations ------------------
int calculate_priority(int symptoms[], int age);
void load_patients(const char* filename);
void enqueue(Patient* new_patient);
void treat_patient();
void print_queue();
void save_to_history(Patient* p);
void trim_newline(char* str);

// ------------------ Priority Calculation Function ------------------
// Calculates a patient's priority based on symptom severity and age
int calculate_priority(int symptoms[], int age) {
    int score = 0;
    for (int i = 0; i < SYMPTOM_COUNT; i++) {
        score += symptoms[i];
    }
    if (score >= 5 || age >= 70) return 1;
    else if (score >= 3) return 2;
    else return 3;
}

// ------------------ Utility: Remove newline characters ------------------
void trim_newline(char* str) {
    int len = strlen(str);
    while (len > 0 && (str[len - 1] == '\n' || str[len - 1] == '\r')) {
        str[--len] = '\0';
    }
}

// ------------------ Add Patient to Priority Queue ------------------
void enqueue(Patient* new_patient) {
    if (!head || new_patient->priority < head->priority) {
        new_patient->next = head;
        head = new_patient;
        return;
    }
    Patient* current = head;
    while (current->next && current->next->priority <= new_patient->priority) {
        current = current->next;
    }
    new_patient->next = current->next;
    current->next = new_patient;
}

// ------------------ Load Patients from CSV File ------------------
void load_patients(const char* filename) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        perror("File open failed");
        return;
    }

    char line[MAX_LINE];
    fgets(line, MAX_LINE, file);  // Skip header line

    int count = 0;

    while (fgets(line, MAX_LINE, file)) {
        char line_copy[MAX_LINE];
        strcpy(line_copy, line);

        Patient* p = (Patient*)malloc(sizeof(Patient));
        if (!p) {
            printf("Memory allocation failed\n");
            continue;
        }

        int symptoms[SYMPTOM_COUNT];
        char* token;

        // Parse SSN
        token = strtok(line_copy, ",");
        if (!token) { free(p); continue; }
        trim_newline(token);
        strcpy(p->ssn, token);

        // Parse Date of Birth and calculate age
        token = strtok(NULL, ",");
        if (!token) { printf("❌ Missing DoB\n"); free(p); continue; }
        trim_newline(token);

        int day, month, year;
        if (sscanf(token, "%d/%d/%d", &day, &month, &year) != 3) {
            printf("❌ DoB parsing failed: [%s]\n", token);
            free(p);
            continue;
        }
        p->age = 2025 - year;

        // Skip Postal Code
        token = strtok(NULL, ",");

        // Parse Admission Date
        token = strtok(NULL, ",");
        if (!token) { printf("❌ Missing DateIn\n"); free(p); continue; }
        trim_newline(token);
        strcpy(p->dateIn, token);

        // Parse Admission Time
        token = strtok(NULL, ",");
        if (!token) { printf("❌ Missing TimeIn\n"); free(p); continue; }
        trim_newline(token);
        strcpy(p->timeIn, token);

        // Parse Symptoms
        for (int i = 0; i < SYMPTOM_COUNT; i++) {
            token = strtok(NULL, ",");
            symptoms[i] = token ? atoi(token) : 0;
        }

        // Assign priority and insert into queue
        p->priority = calculate_priority(symptoms, p->age);
        p->next = NULL;
        enqueue(p);
        count++;
    }

    fclose(file);
    printf("✅ %d patients loaded into the queue.\n", count);
}

// ------------------ Treat a Patient ------------------
void treat_patient() {
    if (!head) {
        printf("⚠️ No patients in queue.\n");
        return;
    }
    Patient* treated = head;
    head = head->next;
    printf("🩺 Treating patient SSN: %s (Priority %d)\n", treated->ssn, treated->priority);
    save_to_history(treated);
    free(treated);
}

// ------------------ Save Treated Patient to History ------------------
void save_to_history(Patient* p) {
    FILE* file = fopen("history.txt", "a");
    if (!file) return;
    time_t now = time(NULL);
    struct tm* t = localtime(&now);
    fprintf(file, "%s,%d,%s,%s,%d,%02d:%02d\n",
            p->ssn, p->age, p->dateIn, p->timeIn, p->priority,
            t->tm_hour, t->tm_min);
    fclose(file);
}

// ------------------ Print the Patient Queue ------------------
void print_queue() {
    if (!head) {
        printf("⚠️ Patient queue is empty.\n");
        return;
    }

    Patient* current = head;
    printf("\n📋 [ Patient Queue ]\n");
    while (current) {
        printf("SSN: %s | Age: %d | Date: %s %s | Priority: %d\n",
               current->ssn, current->age, current->dateIn, current->timeIn, current->priority);
        current = current->next;
    }
    printf("-----------------------\n");
}

// ------------------ Main Function ------------------
int main() {
    int choice;
    load_patients("D:\\programming project\\patient.csv");  // Path to CSV file (adjust if needed)

    while (1) {
        printf("\n===== Hospital Management System =====\n");
        printf("1. View Patient Queue\n");
        printf("2. Treat Next Patient\n");
        printf("3. Exit\n");
        printf("Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                print_queue();
                break;
            case 2:
                treat_patient();
                break;
            case 3:
                printf("👋 Exiting...\n");
                return 0;
            default:
                printf("Invalid input.\n");
        }
    }
}
